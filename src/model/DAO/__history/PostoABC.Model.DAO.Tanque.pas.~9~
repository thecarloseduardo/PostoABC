unit PostoABC.Model.DAO.Tanque;

interface

uses
  PostoABC.Model.DAO.Contract,
  PostoABC.Model.Entities.Tanque, Data.DB,
  PostoABC.Model.Components.Connection.Contract;

type
    TModelDAOTanque = class(TInterfacedObject, IModelDAOEntity<TTanque>)
      private
        FConnection : IModelComponentsConnection;
        FDataSet    : TDataSource;
        FEntity     : TTanque;
      public
        constructor Create;
        destructor Destroy; override;
        class function New : IModelDAOEntity<TTanque>;
        function Delete                        : IModelDAOEntity<TTanque>;
        function DataSet(AValue : TDataSource) : IModelDAOEntity<TTanque>;
        function Get                           : IModelDAOEntity<TTanque>;
        function Insert                        : IModelDAOEntity<TTanque>;
        function Update                        : IModelDAOEntity<TTanque>;
        function This                          : TTanque;
    end;

implementation

uses
  System.SysUtils;

{ TModelDAOTanque }

constructor TModelDAOTanque.Create;
begin

end;

function TModelDAOTanque.DataSet(AValue: TDataSource): IModelDAOEntity<TTanque>;
begin

end;

function TModelDAOTanque.Delete: IModelDAOEntity<TTanque>;
begin
Result := Self;
  try
    Self.FConnection.Active(false);
    Self.FConnection.ClearSQL;
    Self.FConnection.SQL('DELETE TANQUES WHERE ID_ABASTECIMENTO = :ID_ABASTECIMENTO');
    Self.FConnection.ParamName('ID_ABASTECIMENTO' ,Self.FEntity.IdTanque);
    Self.FConnection.ExecSQL;
  except
    on e:exception do
    begin
      raise Exception.Create('Error ao deletar o tanque: ' + e.Message);
    end;
  end;
end;

destructor TModelDAOTanque.Destroy;
begin

  inherited;
end;

function TModelDAOTanque.Get: IModelDAOEntity<TTanque>;
begin
  Result := Self;
  try
    Self.FConnection.Active(false);
    Self.FConnection.ClearSQL;
    Self.FConnection.SQL('SELECT * FROM TANQUE');
//    Self.FQuery.SQL.Add('SELECT * FROM ABASTECIMENTO WHERE ID_ABASTECIMENTO = :ID_ABASTECIMENTO');
//    Self.FQuery.ParamByName('ID_ABASTECIMENTO').AsInteger := Self.FEntity.IdAbastecimento;
//    Self.FQuery.Open;
  except
    on e:exception do
    begin
      raise Exception.Create('Error ao inserir o tanque: ' + e.Message);
    end;
  end;
end;

function TModelDAOTanque.Insert: IModelDAOEntity<TTanque>;
begin
  Result := Self;
  try
    Self.FConnection.Active(false);
    Self.FConnection.ClearSQL;
    Self.FConnection.SQL('INSERT INTO TANQUES(NUMERO_TANQUE, CAPACIDADE_TANQUE)');
    Self.FConnection.SQL(' VALUE (:NUMERO_TANQUE, :CAPACIDADE_TANQUE');
    Self.FConnection.ParamName('NUMERO_TANQUE', Self.FEntity.NumeroTanque);
    Self.FConnection.ParamName('CAPACIDADE_TANQUE', Self.FEntity.CapacidadeTanque);
    Self.FConnection.ExecSQL;
  except
    on e:exception do
    begin
      raise Exception.Create('Error ao inserir o abastecimento: ' + e.Message);
    end;
  end;
end;

class function TModelDAOTanque.New: IModelDAOEntity<TTanque>;
begin
    Result := Self.Create;
end;

function TModelDAOTanque.This: TTanque;
begin
  Result := FEntity;
end;

function TModelDAOTanque.Update: IModelDAOEntity<TTanque>;
begin
  Result := Self;
  try
    Self.FConnection.Active(false);
    Self.FConnection.ClearSQL;
    Self.FConnection.SQL('UPDATE TANQUE SET NUMERO_TANQUE = :NUMERO_TANQUE,');
    Self.FConnection.SQL(' CAPACIDADE_TANQUE = :CAPACIDADE_TANQUE');
    Self.FConnection.SQL(' WHERE ID_TANQUE = :ID_TANQUE)');
    Self.FConnection.ParamName('NUMERO_TANQUE', Self.FEntity.NumeroTanque);
    Self.FConnection.ParamName('CAPACIDADE_TANQUE', Self.FEntity.CapacidadeTanque);
    Self.FConnection.ParamName('ID_TANQUE', Self.FEntity.IdTanque);
    Self.FConnection.ExecSQL;
  except
    on e:exception do
    begin
      raise Exception.Create('Error ao atualizar o tanque: ' + e.Message);
    end;
  end;
end;

end.
