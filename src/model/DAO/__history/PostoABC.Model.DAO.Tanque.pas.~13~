unit PostoABC.Model.DAO.Tanque;

interface

uses
  PostoABC.Model.DAO.Contract,
  PostoABC.Model.Entities.Tanque, Data.DB,
  PostoABC.Model.Components.Connection.Contract;

type
    TModelDAOTanque = class(TInterfacedObject, IModelDAOEntity<TTanque>)
      private
        FConnection : IModelComponentsConnection;
        FDataSet    : TDataSource;
        FEntity     : TTanque;
      public
        constructor Create;
        destructor Destroy; override;
        class function New : IModelDAOEntity<TTanque>;
        function Delete                        : IModelDAOEntity<TTanque>;
        function DataSet(AValue : TDataSource) : IModelDAOEntity<TTanque>;
        function Get                           : IModelDAOEntity<TTanque>;
        function Insert                        : IModelDAOEntity<TTanque>;
        function Update                        : IModelDAOEntity<TTanque>;
        function This                          : TTanque;
    end;

implementation

uses
  System.SysUtils, PostoABC.Model.Components.Connection.FireDAC;

{ TModelDAOTanque }

constructor TModelDAOTanque.Create;
begin
  FConnection := TModelComponentsConnectionFireDAC.New;
  FEntity     := TTanque.Create;
end;

function TModelDAOTanque.DataSet(AValue: TDataSource): IModelDAOEntity<TTanque>;
begin
  Result := Self;
  FDataSet := AValue;
  FDataSet.DataSet := Self.FConnection.DataSet;
end;

function TModelDAOTanque.Delete: IModelDAOEntity<TTanque>;
begin
Result := Self;
  try
    Self.FConnection
            .Active(false)
            .ClearSQL
            .SQL('DELETE TANQUES WHERE ID_ABASTECIMENTO = :ID_ABASTECIMENTO')
            .ParamName('ID_ABASTECIMENTO' ,Self.FEntity.IdTanque)
            .ExecSQL;
  except
    on e:exception do
    begin
      raise Exception.Create('Error ao deletar o tanque: ' + e.Message);
    end;
  end;
end;

destructor TModelDAOTanque.Destroy;
begin
  Self.FEntity.Free;
  inherited;
end;

function TModelDAOTanque.Get: IModelDAOEntity<TTanque>;
begin
  Result := Self;
  try
    Self.FConnection
      .Active(false)
      .ClearSQL
      .SQL('SELECT * FROM TANQUES')
//    Self.FQuery.SQL.Add('SELECT * FROM ABASTECIMENTO WHERE ID_ABASTECIMENTO = :ID_ABASTECIMENTO');
//    Self.FQuery.ParamByName('ID_ABASTECIMENTO').AsInteger := Self.FEntity.IdAbastecimento;
      .Open;
  except
    on e:exception do
    begin
      raise Exception.Create('Error ao inserir o tanque: ' + e.Message);
    end;
  end;
end;

function TModelDAOTanque.Insert: IModelDAOEntity<TTanque>;
begin
  Result := Self;
  try
    Self.FConnection
      .Active(false)
      .ClearSQL
      .SQL('INSERT INTO TANQUES(NUMERO_TANQUE, CAPACIDADE_TANQUE)')
      .SQL(' VALUES (:NUMERO_TANQUE, :CAPACIDADE_TANQUE')
      .ParamName('NUMERO_TANQUE', Self.FEntity.NumeroTanque)
      .ParamName('CAPACIDADE_TANQUE', Self.FEntity.CapacidadeTanque)
      .ExecSQL;
  except
    on e:exception do
    begin
      raise Exception.Create('Error ao inserir o abastecimento: ' + e.Message);
    end;
  end;
end;

class function TModelDAOTanque.New: IModelDAOEntity<TTanque>;
begin
    Result := Self.Create;
end;

function TModelDAOTanque.This: TTanque;
begin
  Result := FEntity;
end;

function TModelDAOTanque.Update: IModelDAOEntity<TTanque>;
begin
  Result := Self;
  try
    Self.FConnection
      .Active(false)
      .ClearSQL
      .SQL('UPDATE TANQUE SET NUMERO_TANQUE = :NUMERO_TANQUE,')
      .SQL(' CAPACIDADE_TANQUE = :CAPACIDADE_TANQUE')
      .SQL(' WHERE ID_TANQUE = :ID_TANQUE)')
      .ParamName('NUMERO_TANQUE', Self.FEntity.NumeroTanque)
      .ParamName('CAPACIDADE_TANQUE', Self.FEntity.CapacidadeTanque)
      .ParamName('ID_TANQUE', Self.FEntity.IdTanque)
      .ExecSQL;
  except
    on e:exception do
    begin
      raise Exception.Create('Error ao atualizar o tanque: ' + e.Message);
    end;
  end;
end;

end.
